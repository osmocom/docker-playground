#!/bin/bash

RESTORE_NOTE_TC="Note: If --restore is given, then for restoring purposes, it suffices to append a dot to the testsuite name \(<TTCN3_TESTSUITE>.\)"

usage () {
	USAGE_STR=""
	USAGE_STR="${USAGE_STR}usage: $(basename $0) [-l|--list-files] [-h|--help] [-r|--restore] [-a|--append] [-c|--config-file <CONFIG_FILE>] [-o|--osmo-ttcn3-branch <OSMO_TTCN3_BRANCH>] [-d|--subdir <SUBDIR> [-A|--ADD [<REPO_DIR>]] [-n|--no-prompt]] ] [[-a|--append] -t|--testcases <TTCN3_TESTCASE>... [-n|--no-prompt]] \n"
	USAGE_STR="${USAGE_STR}Adapt Osmocom docker-playground to custom needs (branch pointed to, testcomponent and testcases to run).\n"
	USAGE_STR="${USAGE_STR}\n"
	USAGE_STR="${USAGE_STR}	-r, --restore		Restore target files from docker-playground to point to current commit of repository.\n"
	USAGE_STR="${USAGE_STR}	-c, --config-file	Name of config file (basename only, no path components): Only give this if the testsuite config file doesn't derive from the testcase name\n"
	USAGE_STR="${USAGE_STR}				(e.g. for '-t Testcase BTS_Tests_SMSCB.TC_etws_pcu', we need to give the config file option '-c BTS_Tests.cfg', \n"
	USAGE_STR="${USAGE_STR}				because the testsuite prefix doesn't follow a clear pattern. For testcases matching '-t NS_Tests.*',\n"
	USAGE_STR="${USAGE_STR}				this isn't true, NS_Tests.cfg is the (expected) config file indeed). This will only work if a single testsuite is targeted!\n"
	USAGE_STR="${USAGE_STR}	-o, --osmo-ttcn3-branch	Point to branch OSMO_TTCN3_BRANCH of osmo-ttcn3-hacks repo.\n"
	USAGE_STR="${USAGE_STR}	-l, --list-files	List target files that will be changed/restored.\n"
	USAGE_STR="${USAGE_STR}	-d, --subdir		Operate on target subdir SUBDIR of docker-playground. Has different effects depending on the actions taken (e.g. for TTCN3 branch adaption, it doesn't change anything)\n"
	USAGE_STR="${USAGE_STR}	-A, --ADD		Adapt Dockerfile: Essentially exchange 'git clone' command with a Dockerfile ADD. Only for 'osmo-*-master' folders, if REPO_DIR isn't given, a default repo folder \n"
	USAGE_STR="${USAGE_STR}				(e.g. SUBDIR/osmo-bts-repo for SUBDIR osmo-bts-master) will be expected to already exist.\n"
	USAGE_STR="${USAGE_STR}	-n, --no-prompt		Don't prompt for changes. Applies to the previous option used (for testcases: Don't prompt if multiple cfg files are possibly found. for --ADD: Don't prompt if subdir already exists.\n"
	USAGE_STR="${USAGE_STR}	-a, --append		Append testcase to existing list of testcases.\n"
	USAGE_STR="${USAGE_STR}	-t, --testcases		Give testcase(s) TTCN3_TESTCASE of format <TTCN3_TESTSUITE>.<TC_NAME>. For each '-t' option item, the testsuite prefix (including the dot) need to be given only once.\n"
	USAGE_STR="${USAGE_STR}				Will prompt for files to manipulate since there are subdirectories sometimes with alternative config files.\n"
	USAGE_STR="${USAGE_STR}				Will not prompt for anything, if docker-playground repository subdirectory SUBDIR with the TTCN3 testconfig is given\n"
	USAGE_STR="${USAGE_STR}				Example:\n"
	USAGE_STR="${USAGE_STR}				-t NS_Tests.TC_sns_sgsn_add TC_sns_sgsn_second_add\n"
	USAGE_STR="${USAGE_STR}				$RESTORE_NOTE_TC\n"
	echo -ne "$USAGE_STR"
}

# Actions besides printing usage
OSMO_TTCN3_BRANCH=""
OSMO_TTCN3_BRANCH_OPT=""
OSMO_TTCN3_BRANCH_ESCAPED=""
RESTORE=""
LIST_FILES=""
TESTCASE_OPT=""
NO_PROMPT_TC=""
TESTSUITE=""
TESTSUITE_CFG=""
TESTCASES=""
SUBDIR=""
SUBDIR_DEFAULT=""
APPEND=""
TESTSUITES=""
ADD=""
ADD_REPO_PATH=""
NO_PROMPT_ADD=""

user_wants() {
	if [ -n "$2" ]; then
		return 0
	fi
	PROMPT="$1"
	while true; do
	    read -p "$PROMPT" yn
	    case $yn in
	        [Yy] | [Yy]es)
			return 0
		;;
	        [Nn] | [Nn]o)
			return 1
		;;
	        * ) echo "Please answer yes or no."
		;;
	    esac
	done
}

list_files() {
	log="$1"
	echo "$log"
	shift
	for file in $@; do
		echo "$(readlink -f $file)"
	done
	echo ""
}

adapt_ttcn3_branches() {
	local FILE_LIST_LOC="$@"
	# Branch replacement
	if [ -n "$RESTORE" ]; then
		for file in $FILE_LIST_LOC; do
			if ! git checkout -q $file; then
				echo "Error restoring file $FILE" >&2
				RESTORE_ERR=1
			fi
		done
	elif [ -n "$OSMO_TTCN3_BRANCH_ESCAPED" ]; then
		TMP_FILE="/tmp/$$_file"
		for file in $FILE_LIST_LOC; do
			if ! sed -i 's/\(OSMO_TTCN3_BRANCH[?]\?=\)[^\\]*\(\\\?\)$/\1'"\"$OSMO_TTCN3_BRANCH_ESCAPED\""'\2/g' $file; then
				REPLACE_ERR=1
			fi
			# if ! sed 's/\(OSMO_TTCN3_BRANCH[?]\?=\)[^\\]*\(\\\?\)$/\1'"\"$OSMO_TTCN3_BRANCH_ESCAPED\""'\2/g' $file >$TMP_FILE 2>&1; then
			# 	REPLACE_ERR=1
			# elif ! grep -q $OSMO_TTCN3_BRANCH $TMP_FILE; then
			# 	REPLACE_ERR=1
			# 	echo "Error replacing branchnames in file $file" >&2
			# elif ! cp $TMP_FILE $file; then
			# 	REPLACE_ERR=1
			# fi
			if [ "$REPLACE_ERR" = "1" ]; then
				echo "Couldn't point docker-playground to branch $OSMO_TTCN3_BRANCH_ESCAPED" >&2
			fi
		done
		rm -f $TMP_FILE
	fi
}

adapt_ttcn3_testcases() {
	local FILE_LIST_LOC="$@"
	for file in $FILE_LIST_LOC; do
		if [ -n "$RESTORE" ]; then
			if ! git checkout -q "$file"; then
				echo "Error restoring file $FILE" >&2
				RESTORE_ERR=1
			fi
			continue
		fi
		if [ -z "$SUBDIR" ]; then
			FNAME_REGEX="/$TESTSUITE_CFG"
		else
			FNAME_REGEX="/$SUBDIR/.*/\?$TESTSUITE_CFG"
		fi
		if [ -n "$TESTCASES" ] && echo "$file" | grep -q "[^/]*$FNAME_REGEX"; then
			if [ -z "$NO_PROMPT_TC" ] && ! user_wants "Adapt file $file?" "$NO_PROMPT"; then # Multiple cfg files possible, so we prompt
				break; # Avoid too many nested ifs...
			fi
			TMP_FILE="/tmp/$$_file"
			TESTCASE_REGEX="$testsuite"'\.[^\t ]*'
			EXECUTE_LINE="^[ \t]*\[EXECUTE\][ \t\\]*$"
			NEXT_SECTION_LINE="\[[A-Z_a-z0-9]\+\]"
			# Delete all lines of the EXECUTE cfg section
			if [ -z "$APPEND" ]; then
				if ! sed -i '/'"$EXECUTE_LINE"'/,/^'"$NEXT_SECTION_LINE"'/{/^'"$EXECUTE_LINE"'/!{/^'"$NEXT_SECTION_LINE"'/!d}}' $file; then
					echo "Error removing existing testcases from file $file" >&2
					REPLACE_ERR=1
				fi
			fi
			# Insert testcase lines after [EXECUTE] block. This means the list of testcases
			# has to be reversed. We use tac, which only works like we want if we
			#  - prepend and append a space
			#  - echo without a trailing newline
			TESTCASES_FOR_REVERSAL=" $TESTCASES "
			for tc in $(echo -n "$TESTCASES_FOR_REVERSAL" | tac -s' '); do
				tc_testsuite="$(echo $tc | grep '\.' | sed 's/\([^\.]\+\)\..*/\1/')"
				if [ $testsuite != $tc_testsuite ]; then
					continue
				fi
				if ! sed -i '/'"$EXECUTE_LINE"'/a '"$tc" $file; then
					echo "Error appending testcase lines" >&2
					REPLACE_ERR=1
				fi
			done
		fi
	done
	initial_run=""
}

adapt_dockerfile() {
	if ! echo "$SUBDIR_ADD" | grep -q '.*-master'; then
		if [ -n "$RESTORE" ]; then
			local adapt_restore="restoring"
		else
			local adapt_restore="adapting"
		fi
		if ! user_wants "$SUBDIR_ADD doesn't end on '-master', are you sure you want to proceed with $adapt_restore the Dockerfile in $(pwd)?"; then
			echo "Exiting because there is nothing else to be done" # Keep this as the last action
			exit 0
		fi
	fi
	if [ -n "$RESTORE" ]; then
		if ! git checkout -q Dockerfile; then
			echo "Error restoring file Dockerfile" >&2
			RESTORE_ERR=1
		fi
		return 0
	fi

	DOCKER_SUBDIR="$(echo $SUBDIR_ADD | sed 's/-master//')" #TODO: Make subdir adaptable in case some dirs don't play nice... I think our docker playground scripts are adapted to play nice though
	if [ -n "$ADD_REPO_PATH" ]; then
		if [ -d "$DOCKER_SUBDIR" ]; then
			if ! user_wants "$DOCKER_SUBDIR already exists. Do you want to update its contents with contents from $ADD_REPO_PATH?" "$NO_PROMPT_ADD"; then
				exit 0
			fi
		fi
		set -x
		rsync -avz "$ADD_REPO_PATH/" "$DOCKER_SUBDIR" >/dev/null
		set +x
		rc=$?
		if [ "$rc" = 1 ]; then
			echo "Error rsyncing" >&2
			exit 1
		fi
	fi
	if (( $(cat Dockerfile | grep 'RUN.*git clone' | wc -l) > 1 )); then
		echo "Found more than one line entry matching 'CMD.*git clone' in '"$(pwd)"'/Dockerfile, not proceeding" >&2
		exit 1
	fi
	sed -i 's:RUN.*git clone.*$:ADD\t'"$DOCKER_SUBDIR"' '"$DOCKER_SUBDIR"':g' Dockerfile # Should fit the Dockerfile, e.g. 'osmo-bts' still being used inside Docker
	CD_LINE="RUN.*cd $DOCKER_SUBDIR"
	# INSTALL_LINE=".*make.*install$"
	AUTORECONF_LINE=".*autoreconf.*fi"
	if ! sed -i '/'"$CD_LINE"'/,/^'"$AUTORECONF_LINE"'/{/^'"$CD_LINE"'/!{/^'"$AUTORECONF_LINE"'/!d}}' Dockerfile; then
		echo "Couldn't remove lines between line matching pattern '$CD_LINE' and pattern '$AUTORECONF_LINE'" >&2
	else
		echo "Beware that you might have to configure your repository so that it conforms to the test demands! Lines removed:" >&2
		git diff -- Dockerfile
		if ! echo "$SUBDIR_ADD" | grep -q '-master$'; then
			echo "=================== Warning! ======================"
			echo "Directory $SUBDIR_ADD doesn't end on '-master', some things may have to be adapted manually (how things are installed)"
		fi
	fi
	sed -i '/ADD.*http.* .*commit-.*$/d' Dockerfile
}

# Use to test if anything is to be done
while [ "$1" != "" ]; do
	PARAM=$1
	VALUE=$2
	case $PARAM in
		-h | --help)
			usage
			exit
			;;
		-r | --restore)
			RESTORE="yes"
			;;
		-l | --list-files)
			LIST_FILES="yes"
			;;
		-n | --no-prompt)
			# Ignore, is processed in respective options it applies to
			;;
		-a|--append)
			APPEND="yes"
			;;
		-c |--config-file)
			if [ -n "$VALUE" ] && ! echo $VALUE | grep -q "^-.*"; then
				TESTSUITE_CFG="$VALUE"
			else
				echo "Error: Missing config file name (basename) for option $PARAM" >&2
				exit 1
			fi
			;;
		-o | --osmo-ttcn3-branch)
			OSMO_TTCN3_BRANCH_OPT="$PARAM"
			if [ -n "$VALUE" ]; then
				if echo $VALUE | grep -q "^-.*"; then
					shift
					continue; # Restoring is also possible without any given branch, this might indicate the next option
				fi
				OSMO_TTCN3_BRANCH=$VALUE
				OSMO_TTCN3_BRANCH_ESCAPED="$(echo $OSMO_TTCN3_BRANCH | sed 's/\//\\\//g')" # Escape slashes for sed
				shift
			fi
			;;
		-d | --subdir)
			SUBDIR="$(echo $VALUE | sed 's:/*$::')"
			;;
		-A | --ADD)
			if [ -z "$SUBDIR" ]; then
				SUBDIR_ADD="$(basename $(pwd))"
				echo "Using subdir $SUBDIR_DEFAULT for adapting Dockerfile"
			else
				SUBDIR_ADD="$(basename $(readlink -f $SUBDIR))"
			fi
			ADD="yes"
			if [ -n "$VALUE" ] && ! echo $VALUE | grep -q "^-.*"; then
				ADD_REPO_PATH="$(readlink -f $VALUE)"
				if ! [ -d "$ADD_REPO_PATH" ]; then
					echo "Error: Couldn't find path $ADD_REPO_PATH" >&2
				fi
			fi
			if [ -n "$3" ] && ( [ "$2" = "-n" ] || [ "$2" = "--no-prompt" ] ); then
				NO_PROMPT_ADD="yes"
			fi
			;;
		-t | --testcases)
			TESTCASE_OPT="$PARAM"
			if echo $VALUE | grep -q "^-.*"; then
				shift
				continue; # Restoring is also possible without any given branch, this might indicate the next option
			fi
			# Loop through testcases until none given or until next option comes
			TESTSUITE_PREV="$(echo $VALUE | grep '\.' | sed 's/\([^\.]\+\)\..*/\1/')" # Get everything before the dot if there is one
			TESTSUITES="$TESTSUITE_PREV"
			while [ -n "$2" ] && ! printf "%s\n" "$2" | grep -q -- '^-.*'; do
				TESTSUITE="$(echo $2 | grep '\.' | sed 's/\([^\.]\+\)\..*/\1/')"
				if [ -z "$TESTSUITE" ] && [ -z "$TESTSUITE_PREV" ]; then # This should only happen in the first loop, if no testsuite prefix was given
					echo "Error: Testsuite prefix missing (including dot '.') for testcase string $2" >&2
					echo "Need such a prefix at least once for each series of testcases for one testsuite" >&2
					echo "$RESTORE_NOTE_TC" >&2
					exit 1
				elif [ -n "$TESTSUITE" ]; then
					TESTCASES="$TESTCASES $2"
					if [ $TESTSUITE_PREV != $TESTSUITE ]; then
						TESTSUITES="$TESTSUITES $TESTSUITE"
					fi
					TESTSUITE_PREV="$TESTSUITE"
				elif [ -z "$TESTSUITE" ]; then
					TESTCASES="$TESTCASES $TESTSUITE_PREV.$2"
				fi
				shift
			done
			if [ -n "$2" ] && ( [ "$2" = "-n" ] || [ "$2" = "--no-prompt" ] ); then
				NO_PROMPT_TC="yes"
			fi
			;;
		--)
			break
			;;
		-* | --*)
			echo "Error: Unknown option: $PARAM" >&2
			usage >&2
			exit 1
			;;
		*)
			;;
	esac
	shift
done
TOPIC_SUFFIx="%topix=$TOPIC"
REPO_SUFFIX="docker-playground\(\.git\)\?$"

if [ -n "$TESTCASE_OPT" ] && [ -z "$TESTCASES" ] && [ -z "$RESTORE" ]; then
	echo "Error: No Testcomponent given for option $PARAM" >&2
	exit 1
fi

ACTIONS="$OSMO_TTCN3_BRANCH_ESCAPED\
$RESTORE\
$LIST_FILES\
$TESTCASES\
$ADD"

if [ -z "$ACTIONS" ]; then
	echo "Nothing to do"
	exit 0
fi

if ! URL="$(git config --get remote.origin.url 2>&1)"; then
	echo "Error: Couldn't get origin URL" >&2
	echo "Error message from 'git':" >&2
	echo "$URL" >&2
	exit 1
elif ! echo "$URL" | grep -q '.*'$REPO_SUFFIX; then
	echo "Error: This is not the 'docker-playground' repository" >&2
	echo "Repository URL is $URL, should end on $REPO_SUFFIX" >&2
	exit 1
elif ! REPO_ROOT="$(git rev-parse --show-toplevel 2>&1)"; then
	echo "Error: Couldn't get repository root directory" >&2
	echo "Reason: $REPO_ROOT" >&2
	exit 1
fi

RESTORE_ERR=0
if [ -n "$OSMO_TTCN3_BRANCH_OPT" ]; then
	DOCKERFILE="./Dockerfile"
	if ! [ -f "$DOCKERFILE" ]; then
		echo "No file $DOCKERFILE found"
		echo "You might want to try to run this in a docker-playground subdirectory with a Dockerfile"
		DOCKERFILE=""
	fi

	# Files in which to put branch name
	FILE_LIST="$REPO_ROOT/make/Makefile $(pwd)/$DOCKERFILE"

	if [ -n "$LIST_FILES" ]; then
		list_files "Target files for adapting the osmo-ttcn3-hacks branch to be used" $FILE_LIST
	else
		REPLACE_ERR=0
		adapt_ttcn3_branches $FILE_LIST
	fi
fi


if [ -n "$SUBDIR" ] && ! [ -d $REPO_ROOT/$SUBDIR ]; then
	echo "Error: Couldn't find subdirectory $SUBDIR" >&2
	exit 1
fi

# TODO: Adapt testcases, restore them
if [ -n "$TESTCASE_OPT" ]; then
	# TESTSUITE LOOP. Maybe not the most elegant solution
	inital_run="yes"
	for testsuite in $TESTSUITES; do
		if [ -n "$initial_run" ] && [ -n "$TESTSUITE_CFG" ] && (( $(echo $TESTSUITES | wc -w) > 1 )); then
			echo "Error: Cannot have multiple testsuites ($TESTSUITES) together with option -c" >&2
			exit 1
		fi
		if (( $(echo $TESTSUITES | wc -w) == 1 )) && [ -z "$TESTSUITE_CFG" ]; then
			TESTSUITE_CFG="$testsuite.cfg"
		fi
		FILE_LIST="$(find $REPO_ROOT -name "$TESTSUITE_CFG" -exec readlink -f {} \;)"
		if [ -n "$LIST_FILES" ]; then
			list_files "Target files for adapting testcases (testsuite $testsuite)" $FILE_LIST
		elif [ -z "$FILE_LIST" ]; then
			echo "Empty file list for adapting testcases. Maybe you need to adapt the config file basename via the '-c'-flag" >&2
			echo "Current config file basename searched for: $TESTSUITE_CFG" >&2
		else
			adapt_ttcn3_testcases $FILE_LIST
		fi
	done
fi

if [ -n "$ADD" ]; then # No files to list
	if ! pushd $REPO_ROOT/$SUBDIR_ADD >/dev/null; then
		echo "Error entering path $REPO_ROOT/$SUBDIR_ADD" >&2
		exit 1
	fi
	trap "rv=\$?; popd >/dev/null 2>&1; exit \$?" EXIT
	DOCKERFILE="./Dockerfile"
	if ! [ -f "$DOCKERFILE" ]; then
		echo "No file $DOCKERFILE found"
		echo "You need to run this for a docker-playground subdirectory with a Dockerfile"
		exit 1
	fi
	if [ -n "$LIST_FILES" ]; then
		list_files "Target Dockerfile to adapt:" "./Dockerfile"
	else
		adapt_dockerfile
	fi
fi
exit $REPLACE_ERR
